name: Build and Release Go Executable

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  build-and-release:
    name: Build and Release Go Executable
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21" # Replace with your desired Go version

      # Step 3: Build the executable
      - name: Build the executable
        run: |
          mkdir -p builds
          GOOS=windows GOARCH=amd64 go build -o builds/verdictsniffer.exe main.go

      # Step 4: Determine next version
      - name: Get the latest tag
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        id: increment-version
        run: |
          IFS='.' read -r -a parts <<< "${LATEST_TAG#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          next_patch=$((patch + 1))
          new_version="v${major}.${minor}.${next_patch}"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      # Step 5: Create a GitHub release
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Upload the build artifact to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./builds/verdictsniffer.exe
          asset_name: verdictsniffer.exe
          asset_content_type: application/octet-stream
